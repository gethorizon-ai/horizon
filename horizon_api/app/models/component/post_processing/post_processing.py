"""Data structure to track post-processing operations."""

from app.models.llm.base import BaseLLM
from app.models.parser.pydantic_output_parser import PydanticOutputParser
from app.models.parser.retry_with_error_output_parser import RetryWithErrorOutputParser
from app.utilities.output_schema import output_schema
from langchain.prompts.prompt import PromptTemplate
import copy


# Final output value if unable to align llm output with output schema requirements
FINAL_ERROR_MESSAGE = "Failed to generate output satisfying output schema requirements."

# Retry prompt that only shows error message, but not original prompt or completion. More useful in correcting JSON errors
RETRY_PROMPT = PromptTemplate.from_template(
    """You are a JSON error correction bot. The following output caused an error because it did not satisfy the requirements of the JSON schema. Correct the output to conform to the JSON schema while keeping the intended meaning.

<OUTPUT>: {completion}

<ERROR>: {error}

<CORRECTED JSON OUTPUT>:"""
)


class PostProcessing:
    """Data structure to track post-processing operations."""

    def __init__(self, pydantic_model_s3_key: str, llm: BaseLLM = None):
        """Initializes PostProcessing data structure.

        Args:
            pydantic_model_s3_key (str): s3 key for pydantic model of output schema.
            llm (BaseLLM, optional): LLM object to use when retrying with output errors. Defaults to None.
        """
        self.pydantic_object = output_schema.get_pydantic_object_from_s3(
            pydantic_model_s3_key=pydantic_model_s3_key
        )
        self.pydantic_output_parser = PydanticOutputParser(
            pydantic_object=self.pydantic_object
        )
        self.output_format_instructions = (
            self.pydantic_output_parser.get_format_instructions()
        )

        # Initialize RetryWithErrorOutputParser if llm object provided
        self.retry_with_error_output_parser = None
        if llm:
            self.set_llm_for_retry_with_error_output_parser(llm=llm)

    def set_llm_for_retry_with_error_output_parser(self, llm: BaseLLM):
        """Update or initialize RetryWithErrorOutputParser using provided llm object.

        Args:
            llm (BaseLLM): LLM object to use when retrying with output errors.
        """
        # Copy inputted llm and set temperature to 0 (to aid with error correction)
        llm_copy = copy.deepcopy(llm)
        llm_copy.set_temperature(temperature=0)

        # Add retry_with_error_output_parser
        self.retry_with_error_output_parser = RetryWithErrorOutputParser.from_llm(
            llm=llm_copy, parser=self.pydantic_output_parser, prompt=RETRY_PROMPT
        )

    def parse_and_retry_if_needed(
        self, original_output: str, prompt_string: str
    ) -> str:
        """_summary_

        Args:
            original_output (str): original output string from llm.
            prompt_string (str): original prompt string used to call llm.

        Raises:
            ValueError: raises error if output generated by llm does not satisfy output schema requirements.
            ValueError: raises error if output generated by llm does not satisfy output schema requirements.

        Returns:
            str: output string satisfying output schema requirements.
        """
        # If retry_with_error_output_parser is setup, then try parsing with it. Enables 1 retry currently
        if self.retry_with_error_output_parser:
            try:
                # prompt_value = StringPromptValue(text=prompt_string)
                parsed_output = self.retry_with_error_output_parser.parse(
                    completion=original_output,
                    # prompt_value=prompt_value,
                )
                return parsed_output.json()
            except Exception as e:
                raise ValueError(FINAL_ERROR_MESSAGE + "\n" + str(e))
        # If retry_with_error_output_parser is not setup, then try parsing output directly with no retry
        else:
            try:
                parsed_output = self.pydantic_output_parser.parse(
                    text=original_output,
                )
                return parsed_output.json()
            except Exception as e:
                raise ValueError(FINAL_ERROR_MESSAGE + "\n" + str(e))
